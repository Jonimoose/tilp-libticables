dnl Process this file with autoconf to produce a configure script.

# requires autoconf
AC_PREREQ(2.52)

# init autoconf
AC_INIT(src/intrface.c)

# set library version number
MAJOR_VERSION=3
MINOR_VERSION=7
MICRO_VERSION=5
VERSION=$MAJOR_VERSION.$MINOR_VERSION.$MICRO_VERSION

AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(MICRO_VERSION)
AC_SUBST(VERSION)

# libtool versioning
LT_RELEASE=$MAJOR_VERSION.$MINOR_VERSION
LT_CURRENT=`expr $MINOR_VERSION + $MAJOR_VERSION`
LT_REVISION=$MICRO_VERSION
LT_AGE=$MINOR_VERSION
AC_SUBST(LT_RELEASE)
AC_SUBST(LT_CURRENT)
AC_SUBST(LT_REVISION)
AC_SUBST(LT_AGE)

PACKAGE=libticables
AC_SUBST(PACKAGE)

# init automake
AM_INIT_AUTOMAKE($PACKAGE, $VERSION)

# specify a config file
AM_CONFIG_HEADER(config.h)

# Run test in a subshell; some versions of sh will print an error if
# an executable is not found, even if stderr is redirected.
# Redirect stdin to placate older versions of autoconf.  Sigh.
if (aclocal --print-ac-dir) </dev/null >/dev/null 2>&1 && test -w `aclocal --print-ac-dir`; then
    ACLOCALDIR=`aclocal --print-ac-dir`
    AC_SUBST(ACLOCALDIR)
fi
AM_CONDITIONAL(Aclocal, test x$ACLOCALDIR != x )

# determine the system type
dnl AC_CANONICAL_SYSTEM
# determine the host type
AC_CANONICAL_HOST

# change the default prefix (/usr/local) to /usr
AC_PREFIX_DEFAULT('/usr')

# build time sanity check...
AM_SANITY_CHECK

# checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_MAKE_SET
AC_PROG_LN_S
AC_ISC_POSIX
AC_PROG_GCC_TRADITIONAL
AC_PROG_AWK

# find pkg-config
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test x$PKG_CONFIG = xno ; then
  AC_MSG_ERROR([*** pkg-config not found. See http://www.freedesktop.org/software/pkgconfig/])
fi

dnl checks for libusb-config
#AC_PATH_PROG(LIBUSB_CONFIG, libusb-config, no)
AC_CHECK_PROG(LIBUSB_CONFIG, libusb-config, yes, no)
if test "$LIBUSB_CONFIG" = "yes"; then
  LIBUSB_LDFLAGS=`libusb-config --libs`
  LIBUSB_CFLAGS=`libusb-config --cflags`
  LIBUSB_VERSION=`libusb-config --version`

  AC_DEFINE(HAVE_LIBUSB, 1, [libusb support enabled])
  AC_SUBST(HAVE_LIBUSB)
fi

# checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(unistd.h fcntl.h strings.h termios.h time.h sys/file.h sys/stat.h sys/time.h sys/perm.h sys/types.h sys/ipc.h sys/shm.h asm/io.h sys/ioctl.h alloca.h errno.h libintl.h stddef.h utime.h)
AC_CHECK_HEADERS(tilp/ticable.h tilp/tiglusb.h)

# checks for typedefs, structures, and compiler characteristics.
AC_TYPE_UID_T
AC_TYPE_MODE_T
AC_C_CONST
AC_HEADER_TIME
AC_FUNC_VPRINTF
AC_HEADER_DIRENT
AC_HEADER_MAJOR
AC_FUNC_MALLOC
AC_FUNC_MEMCMP

# checks for library functions.
AC_CHECK_FUNCS(mkfifo cfmakeraw gettimeofday getwd memchr mempcpy memset strerror strstr uname select)
AC_CHECK_MEMBERS(struct stat.st_blksize)

# BSD stuffs
AC_MSG_CHECKING([for BSD])
case "$host" in
  *-*-*bsd*)    ticables_native_bsd=yes ;;
  *)            ticables_native_bsd=no  ;;
esac
AC_MSG_RESULT([$ticables_native_bsd])
AM_CONDITIONAL(OS_BSD, test "$ticables_native_bsd" = "yes")

# Win32 stuffs
AC_MSG_CHECKING([for Win32])
case "$host" in
  *-*-mingw*)   ticables_native_win32=yes ;;
  *-*-cygwin)   ticables_native_win32=yes ;;
  *)            ticables_native_win32=no  ;;
esac
AC_MSG_RESULT([$ticables_native_win32])
AM_CONDITIONAL(OS_WIN32, test "$ticables_native_win32" = "yes")

# Ensure MSVC-compatible struct packing convention is used when
# compiling for Win32 with gcc.
# What flag to depends on gcc version: gcc3 uses "-mms-bitfields", while
# gcc2 uses "-fnative-struct".
if test x"$ticables_native_win32" = xyes; then
  if test x"$GCC" = xyes; then
    msnative_struct=''
    AC_MSG_CHECKING([how to get MSVC-compatible struct packing])
    if test -z "$ac_cv_prog_CC"; then
      our_gcc="$CC"
    else
      our_gcc="$ac_cv_prog_CC"
    fi
    case `$our_gcc --version | sed -e 's,\..*,.,' -e q` in
      2.)
        if $our_gcc -v --help 2>/dev/null | grep fnative-struct >/dev/null; then
          msnative_struct='-fnative-struct'
        fi
        ;;
      *)
        if $our_gcc -v --help 2>/dev/null | grep ms-bitfields >/dev/null; then
          msnative_struct='-mms-bitfields'
        fi
        ;;
    esac
    if test x"$msnative_struct" = x ; then
      AC_MSG_RESULT([no way])
      AC_MSG_WARN([produced libraries might be incompatible with MSVC-compiled code])
    else
      CFLAGS="$CFLAGS $msnative_struct"
      AC_MSG_RESULT([${msnative_struct}])
    fi
  fi
fi

AC_CYGWIN32
AC_MINGW32
AC_EXEEXT

# detect system type
case "$host" in
#	alpha-*-*bsd*)         ARCH="-D__FBSD__" ;;
	alpha*-*-linux-*)      ARCH="-D__ALPHA__ -D__LINUX__" ;;
	alpha*-*-*-*)          ARCH="-D__ALPHA__ -D__LINUX__" ;;
	arm*-*-linux-*)        ARCH="-D__ARM__ -D__LINUX__" ;;
	hppa*)                 ARCH="-D__LINUX__" ;;
	i[[3456]]86-*-linux-*) ARCH="-D__I386__ -D__LINUX__" ;;
	i[[3456]]86-*-hurd-*)  ARCH="-D__LINUX__" ;;
	i[[3456]]86-*-mingw*)  ARCH="-D__WIN32__ -D__MINGW32__ -Os -s" ;;
	i[[3456]]86-*-cygwin)  ARCH="-D__WIN32__ -D__CYGWIN__ -mno-cygwin" ;;
	i[[3456]]86-*-*bsd*)   ARCH="-D__BSD__" ;;
	ia64-*-linux-*)        ARCH="-D__LINUX__" ;;
	m68k-*-linux-*)        ARCH="-D__M68K__ -D__LINUX__" ;;
	mips-*-linux-*)        ARCH="-D__MIPS__ -D__LINUX__" ;;
	mipsel-*-linux-*)      ARCH="-D__MIPS__ -D__LINUX__" ;;
	powerpc-*-linux-*)     ARCH="-D__PPC__  -D__LINUX__" ;;
	s390-*-linux-*)        ARCH="-D__LINUX__" ;;
	sh-*-linux-*)          ARCH="-D__LINUX__" ;;
	sparc-*-linux-*)       ARCH="-D__SPARC__ -D__LINUX__" ;;
	sparc*-sun-solaris*)   ARCH="-D__SPARC__ -D__SOL__" ;;
esac

# initialize libtool
AM_DISABLE_STATIC
AC_LIBTOOL_WIN32_DLL
AM_PROG_LIBTOOL
AC_PROG_LIBTOOL

# some extra flags
CFLAGS="$CFLAGS $ARCH -Wall -D_REENTRANT $LIBUSB_CFLAGS"
LDFLAGS="$LDFLAGS $LIBUSB_LDFLAGS"

# pass flags
AC_SUBST(CFLAGS)
AC_SUBST(LDFLAGS)

# logging facilities
AC_ARG_ENABLE(logging, [  --enable-logging        enables logging facilites [default=no]],,enable_logging=no)

AC_MSG_CHECKING(whether enabling logging facilities)
if test "x$enable_logging" = "xyes"; then
  AC_DEFINE(LOGGING_ENABLED, 1, [Whether to enable logging facilites])
  AC_SUBST(LOGGING_ENABLED)
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

# gettext support
ALL_LINGUAS="fr"
AM_GNU_GETTEXT

locale_dir='${prefix}/share/locale'
AC_SUBST(locale_dir)

# output files
AC_OUTPUT([
Makefile 
docs/Makefile 
macros/Makefile 
man/Makefile
man/ticables-config.1 
src/Makefile 
tests/Makefile 
win32/Makefile
intl/Makefile
po/Makefile.in
ticables-config 
libticables.lsm 
libticables.spec
ticables.pc])

echo Now, you can type 'make' and 'make install'

if test "x$enable_logging" = "xno"; then
 echo ;
 echo "Developpers or users which want to send a bug report can add the" 
 echo "'--enable-logging' option on the 'configure' command line for" 
 echo "enabling logging facilities. Logging files are generated in user's HOME.";
 echo ;
else
 echo ;
 echo "Logging facility has been enabled. Log files are placed in the HOME's user.";
 echo ;
fi